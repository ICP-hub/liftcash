type Phase = variant {
  SurveyResults;
  Vote;
  Uninitialized;
  RatifyResults;
  Survey;
  Ratify;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_2 = variant { Ok : UniquePersonProof; Err : text };
type SurveyResponse = variant {
  PercentageSlider : nat8;
  MultipleChoice : text;
  Dropdown : vec text;
};
type UniquePersonProof = record {
  provider : UniquePersonProofProvider;
  timestamp : nat64;
};
type UniquePersonProofProvider = variant { DecideAI };
type VoteResponse = variant { PercentageVote : nat8 };
service : () -> {
  calculate_total_claim : (principal) -> (opt nat8) query;
  chck_userparticipation_vote : () -> (text) query;
  get_all_claim_percentages : () -> (vec record { principal; nat8 });
  get_all_users : () -> (vec record { principal; text });
  get_average_votes : () -> (vec record { text; VoteResponse }) query;
  get_current_phase_info : () -> (Phase, nat64) query;
  get_ratification_results : () -> (vec record { text; nat64 }) query;
  get_survey_results : () -> (vec record { text; text }) query;
  get_user : () -> (opt record { principal; text });
  get_week_count : () -> (nat64) query;
  get_weekly_ratification_counts : () -> (
      vec record { nat64; vec record { text; nat64 } },
    ) query;
  get_weekly_survey_results : () -> (
      vec record { nat64; vec record { text; text } },
    ) query;
  get_weekly_vote_results : () -> (
      vec record { nat64; vec record { text; VoteResponse } },
    ) query;
  set_user : (text) -> (Result);
  start_new_week : () -> ();
  submit_ratification : (bool) -> (Result_1);
  submit_survey : (vec record { text; SurveyResponse }) -> (Result_1);
  submit_vote : (vec record { text; VoteResponse }) -> (Result_1);
  trigger_reward_mechanism : () -> ();
  verify_proof_of_unique_personhood : (
      principal,
      principal,
      principal,
      text,
      blob,
      nat64,
    ) -> (Result_2);
  whoiam : () -> (principal) query;
}
