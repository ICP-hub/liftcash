type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : float64; Err : text };
type UserRecord = record {
  last_week_reward : float64;
  total_promo : float64;
  lift_token_balance : float64;
  unlocked_promo : float64;
  locked_promo : float64;
  icp_balance : float64;
  burn_history : vec float64;
};
service : () -> {
  calculate_unlocked_amount : () -> ();
  create_user_record : () -> ();
  distribute_rewards : (float64) -> (Result);
  fetch_all_user_records : () -> (vec record { principal; UserRecord }) query;
  fetch_burn_history : () -> (vec float64) query;
  fetch_icp_balance : () -> (float64) query;
  fetch_last_week_reward : () -> (float64) query;
  fetch_lift_token_balance : () -> (float64) query;
  fetch_locked_promo : () -> (float64) query;
  fetch_prize_pool_balance : () -> (float64) query;
  fetch_total_promo : () -> (float64) query;
  fetch_unlocked_promo : () -> (float64) query;
  fetch_user_record : () -> (UserRecord) query;
  init_prize_pool : (opt float64) -> ();
  reset_prize_pool : () -> ();
  test_intercall : (text) -> (text);
  update_burn_history : (float64) -> ();
  update_icp_balance : (float64) -> ();
  update_last_week_reward : (float64) -> ();
  update_lift_token_balance : (float64) -> ();
  update_locked_promo : (float64) -> ();
  update_prize_pool_balance : (float64) -> (Result_1);
  update_total_promo : (float64) -> ();
  update_unlocked_promo : (float64) -> ();
}
